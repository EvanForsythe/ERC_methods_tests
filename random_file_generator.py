#Import storebought modulesimport osimport reimport sysimport globimport argparseimport randomimport csv#At runtime set working directory to the place where the script livesworking_dir = sys.path[0]+'/' os.chdir(working_dir)#os.chdir("/Users/esforsythe/Documents/Work/Bioinformatics/ERC_networks/Analysis/ERC_methods/ERC_methods_tests")#Set up an argument parserparser = argparse.ArgumentParser(description='Script for creating datasets  with randomized proteome datasets')parser.add_argument('-s', '--source_dir', type=str, metavar='', required=True, help='This should be the full path to the directory where the full pool of proteome files lives. Should end in "/"')parser.add_argument('-n','--num_sp', type=int, metavar='', required=True, help='Total number of ingroup species desired in the dataset')parser.add_argument('-j','--job_name', type=str, metavar='', required=True, help='A string indicating the name of the job. Output folders will be based on this')parser.add_argument('-f','--focal_sp', type=str, metavar='', required=True, help='A string indicating the name of the focal species prot file. This sepcies will be included.')parser.add_argument('-o','--outgroup', type=str, metavar='', required=True, help='A string indicating the name of the outgroup species prot file. This sepcies will be included.')#Define the parserargs = parser.parse_args()#Store argumentssource_dir=args.source_dirnum_sp=args.num_spjob_name=args.job_namefocal_sp=args.focal_spoutgroup=args.outgroup#source_dir="/Users/esforsythe/Documents/Work/Bioinformatics/ERC_networks/Analysis/ERC_methods/Cleaned_proteomes_pool/"#num_sp=6#job_name="test01"#focal_sp="Atha.fa"#outgroup="Atri.fa"# list the files pool_files=glob.glob(source_dir+'*fa')#Remove full pathpool_files=[item.replace(source_dir, '') for item in pool_files]#Get the outgroup and ingroup species and remove them from the list of genes. if focal_sp in pool_files:    pool_files.remove(focal_sp)else:    print("Expected focal species,"+str(focal_sp)+", not in list. Exiting...")    sys.exit()if outgroup in pool_files:    pool_files.remove(outgroup)else:    print("Expected outgroup species,"+str(outgroup)+", not in list. Exiting...")    sys.exit()#Randomly sample genomesnum_items_to_select = num_sp - 1 #this is -1 becuase we're going to add Arabidopsis back in to the ingroup.if num_items_to_select > len(pool_files):    print("Error: number of genomes to select is >= to the full pool. Exiting... ")    sys.exit()else:    random_items = random.sample(pool_files, num_items_to_select)    #add focal species and outgroup back inrandom_items+=[focal_sp]random_items+=[outgroup]print(random_items)if len(random_items) == num_sp+1:    print("random files list succesfully generated!")        # Name of the CSV file    csv_filename = job_name+'.csv'        # Write the list to the CSV file    with open(csv_filename, 'w', newline='') as csvfile:        csv_writer = csv.writer(csvfile)        for item in random_items:            csv_writer.writerow([item])        print(f"The list has been written to '{csv_filename}'.")else:    print("ERROR: Something went wrong creating the random list. Exiting...")    sys.exit()    